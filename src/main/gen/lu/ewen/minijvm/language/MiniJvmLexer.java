/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package lu.ewen.minijvm.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import lu.ewen.minijvm.language.psi.MiniJvmTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MiniJvm.flex</tt>
 */
class MiniJvmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\65\2\0\2\7\11\0\1\7\1\6\12\66\1\10\4\0\2"+
    "\7\1\11\1\61\1\17\1\12\1\35\1\41\1\55\1\53\1\31\1\43\1\7\1\15\1\45\1\23\1"+
    "\16\1\46\1\36\1\57\1\25\1\26\1\44\1\32\1\63\3\7\4\0\1\7\1\0\1\13\1\62\1\22"+
    "\1\14\1\37\1\42\1\56\1\54\1\33\1\47\1\7\1\20\1\51\1\24\1\21\1\52\1\40\1\60"+
    "\1\27\1\30\1\50\1\34\1\64\3\7\3\0\1\7\6\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\40\1\1\2\2\3\1\4\1\0"+
    "\1\5\7\0\2\6\2\0\1\6\27\0\1\7\1\10"+
    "\26\0\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\245\0\u07f3\0\u082a"+
    "\0\u0113\0\156\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0113\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5"+
    "\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d"+
    "\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\5\4\1\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\4\6\1\27\1\6"+
    "\1\30\1\6\1\31\1\32\1\33\1\6\1\34\1\6"+
    "\1\35\1\6\1\36\1\6\1\37\1\40\2\6\1\41"+
    "\1\42\2\6\1\43\1\44\1\45\1\6\1\3\1\4"+
    "\1\46\1\4\1\47\1\46\57\3\1\47\1\3\70\0"+
    "\5\4\57\0\1\4\7\0\1\50\67\0\1\51\1\52"+
    "\54\51\1\0\1\51\7\0\1\51\1\52\1\51\1\53"+
    "\2\51\1\54\5\51\1\53\41\51\1\0\1\51\7\0"+
    "\1\51\1\52\20\51\1\55\33\51\1\0\1\51\7\0"+
    "\1\51\1\52\3\51\1\56\3\51\1\57\3\51\1\56"+
    "\40\51\1\0\1\51\7\0\1\51\1\52\22\51\1\60"+
    "\31\51\1\0\1\51\7\0\1\51\1\52\5\51\1\61"+
    "\16\51\1\62\27\51\1\0\1\51\7\0\1\51\1\52"+
    "\46\51\1\63\5\51\1\0\1\51\7\0\1\51\1\52"+
    "\5\51\1\64\46\51\1\0\1\51\7\0\1\51\1\52"+
    "\10\51\1\65\15\51\1\66\25\51\1\0\1\51\7\0"+
    "\1\51\1\52\47\51\1\63\4\51\1\0\1\51\7\0"+
    "\1\51\1\52\10\51\1\67\43\51\1\0\1\51\7\0"+
    "\1\51\1\52\5\51\1\70\16\51\1\71\27\51\1\0"+
    "\1\51\7\0\1\51\1\52\10\51\1\72\15\51\1\73"+
    "\25\51\1\0\1\51\7\0\1\51\1\52\15\51\1\74"+
    "\15\51\1\75\20\51\1\0\1\51\7\0\1\51\1\52"+
    "\46\51\1\76\5\51\1\0\1\51\7\0\1\51\1\52"+
    "\17\51\1\77\17\51\1\100\14\51\1\0\1\51\7\0"+
    "\1\51\1\52\47\51\1\101\4\51\1\0\1\51\7\0"+
    "\1\51\1\52\25\51\1\63\26\51\1\0\1\51\7\0"+
    "\1\51\1\52\27\51\1\63\24\51\1\0\1\51\7\0"+
    "\1\51\1\52\1\102\31\51\1\103\21\51\1\0\1\51"+
    "\7\0\1\51\1\52\2\51\1\104\33\51\1\105\15\51"+
    "\1\0\1\51\7\0\1\51\1\52\33\51\1\106\20\51"+
    "\1\0\1\51\7\0\1\51\1\52\5\51\1\53\25\51"+
    "\1\107\20\51\1\0\1\51\7\0\1\51\1\52\37\51"+
    "\1\110\14\51\1\0\1\51\7\0\1\51\1\52\10\51"+
    "\1\56\26\51\1\111\14\51\1\0\1\51\7\0\1\51"+
    "\1\52\1\112\53\51\1\0\1\51\7\0\1\51\1\52"+
    "\2\51\1\113\51\51\1\0\1\51\7\0\1\51\1\52"+
    "\24\51\1\61\27\51\1\0\1\51\7\0\1\51\1\52"+
    "\26\51\1\65\25\51\1\0\1\51\7\0\1\51\1\52"+
    "\46\51\1\114\5\51\1\0\1\51\7\0\1\51\1\52"+
    "\47\51\1\115\4\51\1\0\1\51\1\0\5\4\1\0"+
    "\1\116\1\0\54\116\1\4\1\117\1\0\1\4\1\47"+
    "\1\4\2\47\57\0\1\47\1\0\2\50\2\0\63\50"+
    "\7\0\1\51\1\52\1\51\1\63\52\51\1\0\1\51"+
    "\7\0\1\51\1\52\4\51\1\120\47\51\1\0\1\51"+
    "\7\0\1\51\1\52\21\51\1\63\32\51\1\0\1\51"+
    "\7\0\1\51\1\52\3\51\1\63\50\51\1\0\1\51"+
    "\7\0\1\51\1\52\7\51\1\121\44\51\1\0\1\51"+
    "\7\0\1\51\1\52\23\51\1\63\30\51\1\0\1\51"+
    "\7\0\1\51\1\52\1\53\53\51\1\0\1\51\7\0"+
    "\1\51\1\52\14\51\1\122\10\51\1\63\26\51\1\0"+
    "\1\51\7\0\1\51\1\52\12\51\1\123\41\51\1\0"+
    "\1\51\7\0\1\51\1\52\2\51\1\56\51\51\1\0"+
    "\1\51\7\0\1\51\1\52\16\51\1\124\10\51\1\63"+
    "\24\51\1\0\1\51\7\0\1\51\1\52\13\51\1\125"+
    "\40\51\1\0\1\51\7\0\1\51\1\52\15\51\1\63"+
    "\36\51\1\0\1\51\7\0\1\51\1\52\25\51\1\63"+
    "\16\51\1\63\7\51\1\0\1\51\7\0\1\51\1\52"+
    "\17\51\1\63\34\51\1\0\1\51\7\0\1\51\1\52"+
    "\27\51\1\63\15\51\1\63\6\51\1\0\1\51\7\0"+
    "\1\51\1\52\5\51\1\126\46\51\1\0\1\51\7\0"+
    "\1\51\1\52\50\51\1\63\3\51\1\0\1\51\7\0"+
    "\1\51\1\52\33\51\1\127\20\51\1\0\1\51\7\0"+
    "\1\51\1\52\10\51\1\130\43\51\1\0\1\51\7\0"+
    "\1\51\1\52\51\51\1\63\2\51\1\0\1\51\7\0"+
    "\1\51\1\52\37\51\1\131\14\51\1\0\1\51\7\0"+
    "\1\51\1\52\4\51\1\132\47\51\1\0\1\51\7\0"+
    "\1\51\1\52\33\51\1\133\20\51\1\0\1\51\7\0"+
    "\1\51\1\52\7\51\1\134\44\51\1\0\1\51\7\0"+
    "\1\51\1\52\37\51\1\135\14\51\1\0\1\51\7\0"+
    "\1\51\1\52\34\51\1\136\17\51\1\0\1\51\7\0"+
    "\1\51\1\52\4\51\1\63\47\51\1\0\1\51\7\0"+
    "\1\51\1\52\40\51\1\137\13\51\1\0\1\51\7\0"+
    "\1\51\1\52\7\51\1\63\44\51\1\0\1\51\7\0"+
    "\1\51\1\52\4\51\1\70\47\51\1\0\1\51\7\0"+
    "\1\51\1\52\7\51\1\72\44\51\1\0\1\51\7\0"+
    "\1\51\1\52\20\51\1\140\33\51\1\0\1\51\7\0"+
    "\1\51\1\52\22\51\1\141\31\51\1\0\1\51\7\0"+
    "\1\116\1\0\54\116\1\0\1\116\7\0\1\116\1\0"+
    "\54\116\1\0\1\117\7\0\1\51\1\52\5\51\1\142"+
    "\46\51\1\0\1\51\7\0\1\51\1\52\10\51\1\143"+
    "\43\51\1\0\1\51\7\0\1\51\1\52\14\51\1\63"+
    "\37\51\1\0\1\51\7\0\1\51\1\52\14\51\1\70"+
    "\37\51\1\0\1\51\7\0\1\51\1\52\16\51\1\63"+
    "\35\51\1\0\1\51\7\0\1\51\1\52\16\51\1\72"+
    "\35\51\1\0\1\51\7\0\1\51\1\52\46\51\1\127"+
    "\5\51\1\0\1\51\7\0\1\51\1\52\24\51\1\63"+
    "\27\51\1\0\1\51\7\0\1\51\1\52\47\51\1\131"+
    "\4\51\1\0\1\51\7\0\1\51\1\52\26\51\1\63"+
    "\25\51\1\0\1\51\7\0\1\51\1\52\14\51\1\127"+
    "\37\51\1\0\1\51\7\0\1\51\1\52\34\51\1\144"+
    "\17\51\1\0\1\51\7\0\1\51\1\52\16\51\1\131"+
    "\35\51\1\0\1\51\7\0\1\51\1\52\40\51\1\145"+
    "\13\51\1\0\1\51\7\0\1\51\1\52\35\51\1\146"+
    "\16\51\1\0\1\51\7\0\1\51\1\52\41\51\1\147"+
    "\12\51\1\0\1\51\7\0\1\51\1\52\15\51\1\127"+
    "\36\51\1\0\1\51\7\0\1\51\1\52\17\51\1\131"+
    "\34\51\1\0\1\51\7\0\1\51\1\52\6\51\1\63"+
    "\45\51\1\0\1\51\7\0\1\51\1\52\11\51\1\63"+
    "\42\51\1\0\1\51\7\0\1\51\1\52\35\51\1\63"+
    "\16\51\1\0\1\51\7\0\1\51\1\52\41\51\1\63"+
    "\12\51\1\0\1\51\7\0\1\51\1\52\30\51\1\63"+
    "\23\51\1\0\1\51\7\0\1\51\1\52\31\51\1\63"+
    "\22\51\1\0\1\51";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5445];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\45\1\1\0\1\11\7\0\2\1\2\0"+
    "\1\1\27\0\2\1\26\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MiniJvmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 9: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 10: break;
          case 3: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 11: break;
          case 4: 
            { yybegin(YYINITIAL); return MiniJvmTypes.COMMENT;
            } 
            // fall through
          case 12: break;
          case 5: 
            { yybegin(YYINITIAL); return MiniJvmTypes.LABEL;
            } 
            // fall through
          case 13: break;
          case 6: 
            { yybegin(YYINITIAL); return MiniJvmTypes.INSTRUCTION;
            } 
            // fall through
          case 14: break;
          case 7: 
            { yybegin(YYINITIAL); return MiniJvmTypes.PARAM_LABEL;
            } 
            // fall through
          case 15: break;
          case 8: 
            { yybegin(YYINITIAL); return MiniJvmTypes.PARAM_DECIMAL;
            } 
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
